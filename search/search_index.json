{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome</p>"},{"location":"#welcome-to-the-home-page-for-all-of-divines-individual-assignments-for-egr314","title":"Welcome to the home page for all of Divine's Individual assignments for EGR314","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome! This is the personal website of Divine Ndionyenma Here you can find all information regarding his individual contributions within the Team 204 embedded system design project</p>"},{"location":"#subsystem","title":"Subsystem","text":"<p>I am responsible for the WiFi subsystem</p> Assignment Link Block Diagram Link Component selection link Schematic Design Link"},{"location":"System_API/","title":"System API Documentation","text":""},{"location":"System_API/#summary","title":"Summary","text":"<p>This API documentation provides details about the message structure, status codes, and message types used in the system. It includes tables for:</p> <ul> <li>Message ID</li> <li>Status</li> <li>Message Types</li> <li>Distance Sensor (Message Type 1)</li> <li>Motor Control (Message Type 2)</li> </ul>"},{"location":"System_API/#message-id","title":"Message ID","text":"<p>The Message ID table defines the unique identifiers for system members and their associated addresses. Each member is assigned a specific ID and address for communication within the system.</p> Member System ID Address Divine Wifi 1 0x01 Jake Human Interface 2 0x02 Jacob Accuator 3 0x03 Andrey Sensor 4 0x04 Broadcast All 88 0x58"},{"location":"System_API/#status","title":"Status","text":"<p>The Status table defines the status codes used in the system to indicate the state of a message or operation.</p> Status Code Normal 0x00 Error 0x01"},{"location":"System_API/#message-types","title":"Message Types","text":"<p>The Message Types table categorizes the types of messages and their associated status or code ranges.</p> Category Status/Code Address Accuator Data -40 to 155 0x10 Motor  Control 0-125 0x20 System Status Normal (0x00), Error (0x01) 0x30 System Initialize Pending (0x00), Complete (0x01) 0x40 Error Error Code 0x99"},{"location":"blockdiagram/","title":"Block Diagram","text":""},{"location":"blockdiagram/#feedback","title":"Feedback","text":"<ul> <li>Transitioned from using two UARTs for individual communication and MQTT server integration to a single UART to simplify the code and streamline communication.</li> <li>Incorporated additional switches to support more debugging features using LEDs. Originally, the setup included just one push button and one LED; the updated configuration allows for up to two LEDs and no more than three switches.</li> <li>Modified the daisy chain setup to meet updated requirements\u2014specifically, using channel 2 for board-to-board communication, with pin 8 assigned to GND and pin 1 designated for Power (VIN).</li> <li>Adjusted the power input from 9V to 5V to accommodate a new power source.</li> </ul>"},{"location":"blockdiagram/#decision-making-process","title":"Decision Making Process","text":"<p>These improvements were driven by both the feedback I received and the opportunity to simplify the system using newer solutions. Removing the second UART eliminated unnecessary steps, making the programming process much more straightforward. With a single UART, I could manage communication with other boards and the MQTT server using one interface. I also enhanced the debugging process by adding more LEDs and push buttons, providing greater flexibility when testing message transmission and verifying whether messages were successfully sent, received, or failed.</p>"},{"location":"component.selection/","title":"Component Selection","text":"<p>This section provides a comparison of available components for the ESP32-based system, along with the rationale behind the selected parts.</p>"},{"location":"component.selection/#table1-esp32","title":"Table1. ESP32","text":"Solution Pros Cons Option 1 - ESP32-S3-WROOM-1  Price: $2.95  Link - Easily Programmable with MPLAB XIDE  - Numerous GPIO pins for multiple uses  - High Data Rate 150Mbps - Most Expensive  - Soldering Difficulty  - Fixed 2.4GHz Frequency Option 2 - ESP32-C3FH4  Price: $1.30  Link - Cheaper Price  - Frequency Range: 2.402GHz\u20132.48GHz  - Supports Bluetooth V5.0 - No ADC Pins  - Lowest Data Rate 54Mbps  - No Antenna Type Included Option 3 - ESP32-C3-MINI-1  Price: $1.80  Link - Cheaper Price  - Programmable with MPLAB XIDE  - High Data Rate 150Mbps - Difficult Surface Mount  - Not for new designs  - Difficult to program <p>Choice: Option 1 Rationale: Selected for familiarity, largest number of GPIO and UART pins necessary for handling internet communication.</p>"},{"location":"component.selection/#table2-voltage-regulator","title":"Table2. Voltage Regulator","text":"Solution Pros Cons Option 1 - LM3671MF-3.3/NOPB  Price: $1.56  Link - Fixed 3.3V output  - Good for step-down function  - Dependable for high voltage - Max input 5.5V  - High temperature  - One output Option 2 - TLV61048DBVR  Price: $0.63  Link - Lowest frequency  - Durable switching  - Lowest cost - Adjustable output  - High current 3.7A  - Higher cost Option 3 - TPS62082DSGR  Price: $1.55  Link - Fixed 3.3V  - 6V input  - 1.2A output - Difficult soldering  - 8 pins make it hard to manage  - Higher cost <p>Choice: Option 1 Rationale: Easiest to solder, low current (600mA), and fixed 3.3V output avoids risk of overvoltage.</p>"},{"location":"component.selection/#table3-push-button","title":"Table3. Push Button","text":"Solution Pros Cons Option 1 - PTS636SM43SMTR LFS  Price: $0.18  Link - Fixed to OFF-MOM  - Inexpensive and bulk-buyable  - Easy to solder - Long delivery time  - Non-illuminating  - Small package Option 2 - FSM2JMTR  Price: $0.37  Link - Fixed to OFF-MOM  - Durable switching  - Inexpensive in bulk - Long delivery time  - Undersoldering issues  - Smallest size Option 3  Price: Not listed  Link - OFF-MOM fixed  - Inexpensive  - Decent button size - Long delivery time  - Non-illuminating  - Small package"},{"location":"component.selection/#table4-esp32-model","title":"Table4. ESP32 Model","text":"ESP Info Answer Help Model ESP32-S3-WROOM-1-N4 Include full part number Product Page URL Main Product Page Espressif.com ESP32-S3-WROOM-1-N4 Datasheet Datasheet Use a link ESP32 S3 Datasheet Datasheet Detailed functions ESP32 S3 Technical Reference Manual I/O, USB, etc. Vendor Link Vendor:Digikey Use vendor link Code Examples LED &amp; Button Code-GitHub GitHub/library resources External Resources LED &amp; Button ESP32 YouTube/Google for specifics Unit Cost $2.95 Vendor or parts site Absolute Max Current (IC) 50nA Datasheet Supply Voltage Range 3.0\u20133.6V Datasheet Max GPIO Current (per pin) 50nA Datasheet Supports External Interrupts Yes Datasheet Programming Hardware MPLAB XIDE, School Provided Datasheet"},{"location":"schematic.design/","title":"Schematic Design","text":""},{"location":"schematic.design/#_1","title":"Schematic Design","text":""},{"location":"schematic.design/#pcb-design","title":"PCB Design","text":""},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}